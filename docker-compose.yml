version: "3.9"

x-airflow-common:
  &airflow-common
#  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.0.1-python3.10}
  build:
    context: .
    dockerfile: ./airflow/Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/src/pipeline/dags
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://${DB_URL}:8080/execution/'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${DB_URL}
  volumes:
    - dbt_project:/dbt
    - datasets:/datasets
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    dataops_postgres:
      condition: service_healthy
    dataops_volume_init:
      condition: service_completed_successfully

services:
  dataops_postgres:
    image: postgres:15
    container_name: dataops_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - dataops_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10

  dataops_volume_init:
    image: alpine:3.18
    container_name: dataops_volume_init
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "mkdir -p /dbt/nyc_taxi &&
       cp -r /source/dbt/nyc_taxi/* /dbt/nyc_taxi/ &&
       cp /source/dbt/profiles.yml /dbt/profiles.yml &&
       mkdir -p /datasets/nyc_taxi/raw &&
       cp -r /source/raw/* /datasets/nyc_taxi/raw/"
    volumes:
      - ./datasets/nyc_taxi/dbt:/source/dbt:ro
      - ./datasets/nyc_taxi/raw:/source/raw:ro
      - dbt_project:/dbt
      - datasets:/datasets

  dataops_dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7.4
    container_name: dataops_dbt
    ports:
      - "8081:8080"
    command: docs serve
    # Container will only start by specifying its profile: 'docker-compose --profile optional up'
    profiles:
      - optional
    depends_on:
      dataops_postgres:
        condition: service_healthy
      dataops_volume_init:
        condition: service_completed_successfully
    environment:
      DBT_PROFILES_DIR: /dbt
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PW: ${DB_PW}
      DB_NAME: ${DB_NAME}
    volumes:
      - dbt_project:/dbt
      - datasets:/datasets
    working_dir: /dbt/nyc_taxi

  dataops_airflow_webserver:
    <<: *airflow-common
    container_name: dataops_airflow_webserver
    ports:
      - "8080:8080"
    command: ["airflow", "api-server"]
    depends_on:
      <<: *airflow-common-depends-on
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: true
      _AIRFLOW_WWW_USER_CREATE: true
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD}

  dataops_airflow_scheduler:
    <<: *airflow-common
    container_name: dataops_airflow_scheduler
    command: ["airflow", "scheduler"]
    depends_on:
      <<: *airflow-common-depends-on
    environment:
      <<: *airflow-common-env
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PW: ${DB_PW}
      DB_NAME: ${DB_NAME}
#      AIRFLOW__LOGGING__LOGGING_LEVEL: DEBUG

volumes:
  dataops_data:
  dbt_project:
  datasets:
